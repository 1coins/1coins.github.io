import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o,c as l,a as n,b as s,d as t,e as a}from"./app-3e6d2d9d.js";const i={},u=a('<h1 id="mq-的相关概念" tabindex="-1"><a class="header-anchor" href="#mq-的相关概念" aria-hidden="true">#</a> MQ 的相关概念</h1><h2 id="什么是-mq" tabindex="-1"><a class="header-anchor" href="#什么是-mq" aria-hidden="true">#</a> 什么是 MQ</h2><p><code>MQ(message queue)</code>，从字面意思上看，本质是个队列，<code>FIFO</code>先入先出，只不过队列中存放的内容是<code>message</code>而已，还是一种跨进程的通信机制，用于上下游传递消息。</p><p>在互联网架构中，<code>MQ</code>是一种非常常见的上下游“逻辑解耦+物理解耦”的消息通信服务。使用了<code>MQ</code>之后，消息发送上游只需要依赖<code>MQ</code>，不用依赖其他服务。</p><h2 id="为什么要用-mq" tabindex="-1"><a class="header-anchor" href="#为什么要用-mq" aria-hidden="true">#</a> 为什么要用 MQ</h2><h3 id="流量消峰" tabindex="-1"><a class="header-anchor" href="#流量消峰" aria-hidden="true">#</a> 流量消峰</h3><p>举个例子，如果订单系统最多能处理一万次订单，这个处理能力应付正常时段的下单时绰绰有余，正常时段下单一秒后就能返回结果；但是在高峰期，如果有两万次下单操作系统是处理不了的，只能限制订单超过一万后不允许用户下单。</p><p>使用消息队列做缓冲，可以取消这个限制，把一秒内下的订单分散成一段时间来处理，这时有些用户可能在下单十几秒后才能收到下单成功的操作，但是比不能下单的体验要好。</p><h3 id="应用解耦" tabindex="-1"><a class="header-anchor" href="#应用解耦" aria-hidden="true">#</a> 应用解耦</h3><p>以电商应用为例，应用中有订单系统、库存系统、物流系统、支付系统；用户创建订单后，如果耦合调用库存系统、物流系统、支付系统，任何一个子系统出了故障，都会造成下单操作异常。</p><p>当转变成基于消息队列的方式后，系统间调用的问题会减少很多，比如物流系统因为发生故障，需要几分钟来修复；在这几分钟的时间里，物流系统要处理的内存被缓存在消息队列中，用户的下单操作可以正常完成；当物流系统恢复后，继续处理订单信息即可，中单用户感受不到物流系统的故障，提升系统的可用性。</p><figure><img src="https://cdn.jsdelivr.net/gh/1coins/assets/rabbitmq-introduction/application-decouple.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="异步处理" tabindex="-1"><a class="header-anchor" href="#异步处理" aria-hidden="true">#</a> 异步处理</h3><p>有些服务间调用是异步的，例如<code>A</code>调用<code>B</code>，<code>B</code>需要花费很长时间执行，但是<code>A</code>需要知道<code>B</code>什么时候可以执行完，以前一般有两种方式，<code>A</code>过一段时间去调用<code>B</code>的查询<code>api</code>查询。或者<code>A</code>提供一个<code>callback api</code>，<code>B</code>执行完之后调用<code>api</code>通知<code>A</code>服务。</p><p>但这两种方式都不是很优雅，使用消息总线，可以很方便解决这个问题。</p><p><code>A</code>调用<code>B</code>服务后，只需要监听<code>B</code>处理完成的消息，当<code>B</code>处理完成后，会发送一条消息给<code>MQ</code>，<code>MQ</code>会将此消息转发给<code>A</code>服务；这样<code>A</code>服务既不用循环调用<code>B</code>的查询<code>api</code>，也不用提供<code>callback api</code>。同样<code>B</code>服务也不用做这些操作，<code>A</code>服务还能及时的得到异步处理成功的消息。</p><figure><img src="https://cdn.jsdelivr.net/gh/1coins/assets/rabbitmq-introduction/asynchronous-process.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="mq-的分类" tabindex="-1"><a class="header-anchor" href="#mq-的分类" aria-hidden="true">#</a> MQ 的分类</h2>',18),d=a("<li><p><code>ActiveMQ</code></p><ul><li>优点：单机吞吐量万级，时效性<code>ms</code>级，可用性高，基于主从架构实现高可用性，消息可靠性较低的概率丢失数据</li><li>缺点：官方社区现在对<code>ActiveMQ 5.x</code>维护越来越少，高吞吐量场景较少使用</li></ul></li><li><p><code>Kafka</code><br> 大数据的杀手锏，谈到大数据领域内的消息传输，则绕不开<code>Kafka</code>，这款为大数据而生的消息中间件，以其百万级<code>TPS</code>的吞吐量名声大噪，迅速成为大数据领域的宠儿，在数据采集、传输、存储的过程中发挥着举足轻重的作用。目前已经被<code>LinkedIn</code>，<code>Uber</code>,<code> Twitter</code>, <code>Netflix</code>等大公司所采纳。</p><ul><li>优点：性能卓越，单机写入<code>TPS</code>约在百万条/秒，最大的优点，就是吞吐量高；时效性<code>ms</code>级可用性非常高，<code>kafka</code>是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用，消费者采用<code>Pull</code>方式获取消息，消息有序，通过控制能够保证所有消息被消费且仅被消费一次；有优秀的第三方<code>Kafka Web</code>管理界面<code>Kafka-Manager</code>；在日志领域比较成熟，被多家公司和多个开源项目使用</li><li><code>Kafka</code>单机超过 64 个队列/分区，<code>Load</code>会发生明显的飙高现象，队列越多，<code>load</code>越高，发送消息响应时间变长，使用短轮询方式，实时性取决于轮询间隔时间，消费失败不支持重试；支持消息顺序，但是一台代理宕机后，就会产生消息乱序，社区更新较慢</li><li>功能支持：功能较为简单，主要支持简单的<code>MQ</code>功能，在大数据领域的实时计算以及日志采集被大规模使用</li></ul></li><li><p><code>RocketMQ</code><br><code>RocketMQ</code>出自阿里巴巴的开源产品，用<code>Java</code>语言实现，在设计时参考了<code>Kafka</code>，并做出了自己的一些改进。被阿里巴巴广泛应用在订单，交易，充值，流计算，消息推送，日志流式处理，<code>binglog</code>分发等场景。</p><ul><li>优点：单机吞吐量十万级,可用性非常高，分布式架构，消息可以做到零丢失，<code>MQ</code>功能较为完善，还是分布式的，扩展性好，支持 10 亿级别的消息堆积，不会因为堆积导致性能下降，源码是<code>Java</code>，可以阅读源码，定制自己公司的<code>MQ</code></li><li>缺点：支持的客户端语言不多，目前是<code>Java</code>及<code>C++</code>，其中<code>C++</code>不成熟；社区活跃度一般，没有在<code>MQ</code>核心中去实现<code>JMS</code>等接口，有些系统要迁移需要修改大量代码</li></ul></li>",3),r=n("p",null,[n("code",null,"RabbitMQ"),n("br"),s(" 2007 年发布，是一个在"),n("code",null,"AMQP"),s("（高级消息队列协议）基础上完成的，可复用的企业消息系统，是当前最主流的消息中间件之一。")],-1),k=n("code",null,"erlang",-1),v=n("code",null,"MQ",-1),m=n("code",null,"Python",-1),b=n("code",null,"Ruby",-1),g=n("code",null,".NET",-1),h=n("code",null,"Java",-1),f=n("code",null,"JMS",-1),y=n("code",null,"C",-1),q=n("code",null,"PHP",-1),w=n("code",null,"ActionScript",-1),_=n("code",null,"XMPP",-1),x=n("code",null,"STOMP",-1),M=n("code",null,"AJAX",-1),C={href:"https://www.rabbitmq.com/news.html",target:"_blank",rel:"noopener noreferrer"},E=n("li",null,"缺点：商业版需要收费，学习成本较高",-1),S=a('<h2 id="mq-的选择" tabindex="-1"><a class="header-anchor" href="#mq-的选择" aria-hidden="true">#</a> MQ 的选择</h2><ol><li><code>Kafka</code><br><code>Kafka</code>主要特点是基于<code>Pull</code>的模式来处理消息消费，追求高吞吐量，一开始的目的就是用于日志收集和传输，适合产生大量数据的互联网服务的数据收集业务。大型公司建议可以选用，如果有日志采集功能，肯定是首选<code>Kafka</code>了。</li><li><code>RocketMQ</code><br> 天生为金融互联网领域而生，对于可靠性要求很高的场景，尤其是电商里面的订单扣款，以及业务削峰，在大量交易涌入时，后端可能无法及时处理的情况；<code>RoketMQ</code>在稳定性上可能更值得信赖，这些业务场景在阿里双 11 已经经历了多次考验，如果业务有上述并发场景，建议可以选择 <code>RocketMQ</code></li><li><code>RabbitMQ</code><br> 结合<code>erlang</code>语言本身的并发优势，性能好时效性微秒级，社区活跃度也比较高，管理界面用起来十分方便，如果数据量没有那么大，中小型公司优先选择功能比较完备的<code>RabbitMQ</code></li></ol><h1 id="rabbitmq" tabindex="-1"><a class="header-anchor" href="#rabbitmq" aria-hidden="true">#</a> RabbitMQ</h1><h2 id="rabbitmq-的概念" tabindex="-1"><a class="header-anchor" href="#rabbitmq-的概念" aria-hidden="true">#</a> RabbitMQ 的概念</h2><p><code>RabbitMQ</code>是一个消息中间件：它接受并转发消息，可以把它当做一个快递站点，当要发送一个包裹时，把包裹放到快递站，快递员最终会把快递送到收件人那里；按照这种逻辑，<code>RabbitMQ</code>是一个快递站，一个快递员帮你传递快件；<code>RabbitMQ</code>与快递站的主要区别在于，它不处理快件而是接收，存储和转发消息数据。</p><h2 id="四大核心概念" tabindex="-1"><a class="header-anchor" href="#四大核心概念" aria-hidden="true">#</a> 四大核心概念</h2><ul><li>生产者：产生数据发送消息的程序是生产者</li><li>交换机：交换机是<code>RabbitMQ</code>非常重要的一个部件，一方面它接收来自生产者的消息，另一方面它将消息推送到队列中。交换机必须确切知道如何处理它接收到的消息，是将这些消息推送到特定队列还是推送到多个队列，亦或者是把消息丢弃，这个得有交换机类型决定</li><li>队列：队列是<code>RabbitMQ</code>内部使用的一种数据结构，尽管消息流经<code>RabbitMQ</code>和应用程序，但它们只能存储在队列中；队列仅受主机的内存和磁盘限制的约束，本质上是一个大的消息缓冲区；许多生产者可以将消息发送到一个队列，许多消费者可以尝试从一个队列接收数据；这就是使用队列的方式</li><li>消费者：消费与接收具有相似的含义。消费者大多时候是一个等待接收消息的程序；请注意生产者，消费者和消息中间件很多时候并不在同一机器上，同一个应用程序既可以是生产者又是可以是消费者</li></ul><h2 id="名词介绍" tabindex="-1"><a class="header-anchor" href="#名词介绍" aria-hidden="true">#</a> 名词介绍</h2><figure><img src="https://cdn.jsdelivr.net/gh/1coins/assets/rabbitmq-introduction/rabbitmq-operate-principle.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><code>Broker</code>：接收和分发消息的应用，<code>RabbitMQ Server</code>就是<code>Message Broker</code></li><li><code>Virtual host</code>：出于多租户和安全因素设计的，把<code>AMQP</code>的基本组件划分到一个虚拟的分组中，类似于网络中的<code>namespace</code>概念；当多个不同的用户使用同一个<code>RabbitMQ Server</code>提供的服务时，可以划分出多个<code>vhost</code>，每个用户在自己的<code>vhost</code>创建<code>exchange／queue</code>等</li><li><code>Connection</code>：<code>publisher／consumer</code>和<code>broker</code>之间的<code>TCP</code>连接</li><li><code>Channel</code>：如果每一次访问<code>RabbitMQ</code>都建立一个<code>Connection</code>，在消息量大的时候建立<code>TCP Connection</code>的开销将是巨大的，效率也较低；<code>Channel</code>是在<code>connection</code>内部建立的逻辑连接，如果应用程序支持多线程，通常每个<code>thread</code>创建单独的<code>channel</code>进行通讯，<code>AMQP method</code>包含了<code>channel id</code>帮助客户端和<code>message broker</code>识别<code>channel</code>，所以<code>channel</code>之间是完全隔离的；<code>Channel</code>作为轻量级的<code>Connection</code>极大减少了操作系统建立<code>TCP connection</code>的开销</li><li><code>Exchange</code>：<code>message</code>到达<code>broker</code>的第一站，根据分发规则，匹配查询表中的<code>routing key</code>，分发消息到<code>queue</code>中去；常用的类型有：<code>direct (point-to-point)</code>，<code>topic (publish-subscribe) and fanout(multicast)</code></li><li><code>Queue</code>：消息最终被送到这里等待<code>consumer</code>取走</li><li><code>Binding</code>：<code>exchange</code>和<code>queue</code>之间的虚拟连接，<code>binding</code>中可以包含<code>routing key</code>，<code>Binding</code>信息被保存到<code>exchange</code>中的查询表中，用于<code>message</code>的分发依据</li></ul><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2>',11),Q={href:"https://www.rabbitmq.com/download.html",target:"_blank",rel:"noopener noreferrer"},U=a(`<li><p>文件上传<br><code>erlang</code>和<code>RabbitMQ</code>上传到<code>/usr/local/software</code>目录下（如果没有<code>software</code>需要自己创建）。</p></li><li><p>安装文件（分别按照以下顺序安装）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">rpm</span> <span class="token parameter variable">-ivh</span> erlang-21.3-1.el7.x86_64.rpm
yum <span class="token function">install</span> socat <span class="token parameter variable">-y</span>
<span class="token function">rpm</span> <span class="token parameter variable">-ivh</span> rabbitmq-server-3.8.8-1.el7.noarch.rpm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>安装依赖问题：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>libcrypto<span class="token punctuation">.</span>so<span class="token punctuation">.</span><span class="token function">10</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">64</span>bit<span class="token punctuation">)</span> is needed by erlang<span class="token operator">-</span><span class="token number">21.3</span><span class="token number">.8</span><span class="token number">.9</span><span class="token operator">-</span><span class="token number">1.</span>el7<span class="token punctuation">.</span>x86_64
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>https://pkgs.org/</code>搜索<code>libcrypto.so.10()(64bit)</code></p></li><li><p>常用命令（按照以下顺序执行）</p><ol><li><p>添加开机启动<code>RabbitMQ</code>服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">chkconfig</span> rabbitmq-server on
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>启动服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/sbin/service rabbitmq-server start
<span class="token comment"># 或</span>
systemctl start rabbitmq-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查看服务状态</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/sbin/service rabbitmq-server status
<span class="token comment"># 或</span>
systemctl status rabbitmq-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>停止服务（选择执行）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/sbin/service rabbitmq-server stop
<span class="token comment"># 或</span>
systemctl stop rabbitmq-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>开启<code>Web</code>管理插件（停止服务后执行）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmq-plugins <span class="token builtin class-name">enable</span> rabbitmq_management
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果报错：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">{</span><span class="token operator">:</span>query<span class="token punctuation">,</span> <span class="token operator">:</span>rabbit<span class="token annotation punctuation">@centos01</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token operator">:</span>badrpc<span class="token punctuation">,</span> <span class="token operator">:</span>timeout<span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改<code>/etc/hosts</code>，添加上</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span> hostname
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>用默认账号密码（<code>guest</code>）访问地址<code>http://192.168.30.129:15672/</code>出现权限问题。</p></li></ol></li><li><p>添加一个新的用户</p><ul><li><p>创建账号</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl add_user admin admin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>设置用户角色</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl set_user_tags admin administrator
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>设置用户权限</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>set_permissions <span class="token punctuation">[</span>-p <span class="token operator">&lt;</span>vhostpath<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>user<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>conf<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>write<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>read<span class="token operator">&gt;</span>
<span class="token comment"># 用户 user_admin 具有/vhost1 这个 virtual host 中所有资源的配置、写、读权限</span>
rabbitmqctl set_permissions <span class="token parameter variable">-p</span> <span class="token string">&quot;/&quot;</span> admin <span class="token string">&quot;.*&quot;</span> <span class="token string">&quot;.*&quot;</span> <span class="token string">&quot;.*&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>当前用户和角色</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl list_users
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p>再次利用<code>admin</code>用户登录</p></li><li><p>重置命令</p><ul><li><p>关闭应用的命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl stop_app
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>清除的命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl reset
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>重新启动命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl start_app
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li>`,6),A=a(`<h1 id="hello-world" tabindex="-1"><a class="header-anchor" href="#hello-world" aria-hidden="true">#</a> Hello World</h1><p>在这一部分中，将用<code>Java</code>编写两个程序。发送单个消息的生产者和接收消息并打印出来的消费者。将介绍<code>Java API</code>中的一些细节。</p><p>在下图中，<code>P</code>是生产者，<code>C</code>是我们的消费者。中间的框是一个<code>RabbitMQ</code>队列代表使用者保留的消息缓冲区。</p><figure><img src="https://cdn.jsdelivr.net/gh/1coins/assets/rabbitmq-introduction/hello-word.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="依赖" tabindex="-1"><a class="header-anchor" href="#依赖" aria-hidden="true">#</a> 依赖</h2><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 指定 JDK 编译版本 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">&gt;</span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- rabbitmq 依赖客户端 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.rabbitmq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>amqp-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 操作文件流的一个依赖 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="消息生产者" tabindex="-1"><a class="header-anchor" href="#消息生产者" aria-hidden="true">#</a> 消息生产者</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">QUEUE_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建一个连接工厂</span>
        <span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.30.129&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// channel 实现了自动 close 接口 自动关闭 不需要显示关闭</span>
        <span class="token keyword">try</span><span class="token punctuation">(</span> <span class="token class-name">Connection</span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Channel</span> channel<span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token doc-comment comment">/**
             * 生成一个队列
             * 1. 队列名称
             * 2. 队列里面的消息是否持久化 默认消息存储在内存中
             * 3. 该队列是否只供一个消费者进行消费 是否进行共享 true 可以多个消费者消费
             * 4. 是否自动删除 最后一个消费者端开连接以后 该队列是否自动删除 true 自动删除
             * 5. 其他参数
             */</span>
            channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token constant">QUEUE_NAME</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> message<span class="token operator">=</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span>
            <span class="token doc-comment comment">/**
             * 发送一个消息
             * 1. 发送到那个交换机
             * 2. 路由的 key 是哪个
             * 3. 其他的参数信息
             * 4. 发送消息的消息体
             */</span>
            channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span><span class="token constant">QUEUE_NAME</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消息发送完毕&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="消息消费者" tabindex="-1"><a class="header-anchor" href="#消息消费者" aria-hidden="true">#</a> 消息消费者</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">QUEUE_NAME</span> <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

        <span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.30.129&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;等待接收消息.........&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 推送的消息如何进行消费的接口回调</span>
        <span class="token comment">// 使用 lambda 表达式更方便</span>
        <span class="token class-name">DeliverCallback</span> deliverCallback<span class="token operator">=</span><span class="token punctuation">(</span>consumerTag<span class="token punctuation">,</span>delivery<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
            <span class="token class-name">String</span> message<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>delivery<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment">// 取消消费的一个回调接口 如在消费的时候队列被删除掉了</span>
        <span class="token class-name">CancelCallback</span> cancelCallback<span class="token operator">=</span><span class="token punctuation">(</span>consumerTag<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消息消费被中断&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token doc-comment comment">/**
         * 消费者消费消息
         * 1. 消费哪个队列
         * 2. 消费成功之后是否要自动应答 true 代表自动应答 false 手动应答
         * 3. 消费者未成功消费的回调
         */</span>
        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token constant">QUEUE_NAME</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span>deliverCallback<span class="token punctuation">,</span>cancelCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="work-queues" tabindex="-1"><a class="header-anchor" href="#work-queues" aria-hidden="true">#</a> Work Queues</h1><p>工作队列（又称任务队列）的主要思想是避免立即执行资源密集型任务，而不得不等待它完成。</p><p>相反安排任务在之后执行，把任务封装为消息并将其发送到队列；在后台运行的工作进程将弹出任务并最终执行作业，当有多个工作线程时，这些工作线程将一起处理这些任务。</p><h2 id="轮训分发消息" tabindex="-1"><a class="header-anchor" href="#轮训分发消息" aria-hidden="true">#</a> 轮训分发消息</h2><p>在这个案例中会启动两个工作线程，一个消息发送线程，来看看他们两个工作线程是如何工作的。</p><h3 id="抽取工具类" tabindex="-1"><a class="header-anchor" href="#抽取工具类" aria-hidden="true">#</a> 抽取工具类</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMqUtils</span> <span class="token punctuation">{</span>

    <span class="token comment">// 得到一个连接的 channel</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Channel</span> <span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>
    <span class="token comment">// 创建一个连接工厂</span>
        <span class="token class-name">ConnectionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">&quot;192.168.30.129&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> channel<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="启动两个工作线程" tabindex="-1"><a class="header-anchor" href="#启动两个工作线程" aria-hidden="true">#</a> 启动两个工作线程</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Worker</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">QUEUE_NAME</span><span class="token operator">=</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> <span class="token class-name">RabbitMqUtils</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">DeliverCallback</span> deliverCallback<span class="token operator">=</span><span class="token punctuation">(</span>consumerTag<span class="token punctuation">,</span> delivery<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
            <span class="token class-name">String</span> receivedMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>delivery<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;接收到消息:&quot;</span><span class="token operator">+</span>receivedMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token class-name">CancelCallback</span> cancelCallback<span class="token operator">=</span><span class="token punctuation">(</span>consumerTag<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>consumerTag<span class="token operator">+</span><span class="token string">&quot;消费者取消消费接口回调逻辑&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消费者 W2 启动等待消费.................. &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token constant">QUEUE_NAME</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span>deliverCallback<span class="token punctuation">,</span>cancelCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cdn.jsdelivr.net/gh/1coins/assets/\\rabbitmq-introduction/start-two-work-thread-1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/1coins/assets/rabbitmq-introduction/start-two-work-thread-2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="启动一个发送线程" tabindex="-1"><a class="header-anchor" href="#启动一个发送线程" aria-hidden="true">#</a> 启动一个发送线程</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">QUEUE_NAME</span><span class="token operator">=</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
  
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">Channel</span> channel<span class="token operator">=</span> <span class="token class-name">RabbitMqUtils</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token constant">QUEUE_NAME</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 从控制台当中接受信息</span>
            <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token class-name">String</span> message <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span><span class="token constant">QUEUE_NAME</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;发送消息完成:&quot;</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="结果展示" tabindex="-1"><a class="header-anchor" href="#结果展示" aria-hidden="true">#</a> 结果展示</h3><p>通过程序执行发现生产者总共发送 4 个消息，消费者 1 和消费者 2 分别分得两个消息，并且是按照有序的一个接收一次消息。</p><figure><img src="https://cdn.jsdelivr.net/gh/1coins/assets/rabbitmq-introduction/turn-distribute-message-result.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="消息应答" tabindex="-1"><a class="header-anchor" href="#消息应答" aria-hidden="true">#</a> 消息应答</h2><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h3><p>消费者完成一个任务可能需要一段时间，如果其中一个消费者处理一个长的任务并仅只完成了部分突然它挂掉了，会发生什么情况</p><p>。<code>RabbitMQ</code>一旦向消费者传递了一条消息，便立即将该消息标记为删除；在这种情况下，突然有个消费者挂掉了，将丢失正在处理的消息，以及后续发送给该消费这的消息，因为它无法接收到。</p><p>为了保证消息在发送过程中不丢失，<code>RabbitMQ</code>引入消息应答机制，消息应答就是：消费者在接收到消息并且处理该消息之后，告诉<code>RabbitMQ</code>它已经处理了，<code>RabbitMQ</code>可以把该消息删除了。</p><h3 id="自动应答" tabindex="-1"><a class="header-anchor" href="#自动应答" aria-hidden="true">#</a> 自动应答</h3><p>消息发送后立即被认为已经传送成功，这种模式需要在<strong>高吞吐量和数据传输安全性方面做权衡</strong>，因为这种模式如果消息在接收到之前，消费者那边出现连接或者<code>channel</code>关闭，那么消息就丢失了，当然另一方面这种模式消费者那边可以传递过载的消息，<strong>没有对传递的消息数量进行限制</strong>，当然这样有可能使得消费者这边由于接收太多还来不及处理的消息，导致这些消息的积压，最终使得内存耗尽，最终这些消费者线程被操作系统杀死，所以这种模式<strong>仅适用在消费者可以高效并以某种速率能够处理这些消息的情况下使用</strong>。</p><h3 id="消息应答的方法" tabindex="-1"><a class="header-anchor" href="#消息应答的方法" aria-hidden="true">#</a> 消息应答的方法</h3><ul><li><p><code>Channel.basicAck</code>：用于肯定确认</p><ul><li><code>RabbitMQ</code>已知道该消息并且成功的处理消息，可以将其丢弃了</li></ul></li><li><p><code>Channel.basicNack</code>：用于否定确认</p></li><li><p><code>Channel.basicReject</code>：用于否定确认</p><ul><li>与<code>Channel.basicNack</code>相比少一个参数<code>Multiple</code></li><li>不处理该消息了直接拒绝，可以将其丢弃了</li></ul></li></ul><p>不处理该消息了直接拒绝，可以将其丢弃了。</p><h3 id="multiple-的解释" tabindex="-1"><a class="header-anchor" href="#multiple-的解释" aria-hidden="true">#</a> Multiple 的解释</h3><p>手动应答的好处是可以批量应答并且减少网络拥堵。</p><p><code>multiple</code>的<code>true</code>和<code>false</code>代表不同意思：</p><ul><li><p><code>true</code>代表批量应答<code>channel</code>上未应答的消息</p><ul><li>比如说<code>channel</code>上有传送<code>tag</code>的消息是 5、6、7、8，当前<code>tag</code>是 8，那么此时 5-8 的这些还未应答的消息都会被确认收到消息应答</li></ul></li><li><p><code>false</code>同上面相比只会应答<code>tag=8</code>的消息，5、6、7 这三个消息依然不会被确认收到消息应答</p></li></ul><figure><img src="https://cdn.jsdelivr.net/gh/1coins/assets/rabbitmq-introduction/multiple-true-false.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="消息自动重新入队" tabindex="-1"><a class="header-anchor" href="#消息自动重新入队" aria-hidden="true">#</a> 消息自动重新入队</h3><p>如果消费者由于某些原因失去连接（其通道已关闭，连接已关闭或<code>TCP</code>连接丢失），导致消息未发送<code>ACK</code>确认，<code>RabbitMQ</code>将了解到消息未完全处理，并将对其重新排队；如果此时其他消费者可以处理，它将很快将其重新分发给另一个消费者；这样，即使某个消费者偶尔死亡，也可以确保不会丢失任何消息。</p><figure><img src="https://cdn.jsdelivr.net/gh/1coins/assets/rabbitmq-introduction/message-automatically-re-enlists.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="消息手动应答代码" tabindex="-1"><a class="header-anchor" href="#消息手动应答代码" aria-hidden="true">#</a> 消息手动应答代码</h3><p>默认消息采用的是自动应答，所以我们要想实现消息消费过程中不丢失，需要把自动应答改为手动应答。</p><ul><li><p>生产者</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TASK_QUEUE_NAME</span><span class="token operator">=</span><span class="token string">&quot;ack_queue&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">Channel</span> channel<span class="token operator">=</span> <span class="token class-name">RabbitMqUtils</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token constant">TASK_QUEUE_NAME</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 从控制台当中接受信息</span>
            <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token class-name">String</span> message <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span><span class="token constant">QUEUE_NAME</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;发送消息完成:&quot;</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>消费者</p><ol><li><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Work01</span> <span class="token punctuation">{</span>

       <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">ACK_QUEUE_NAME</span><span class="token operator">=</span><span class="token string">&quot;ack_queue&quot;</span><span class="token punctuation">;</span>

       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

           <span class="token class-name">Channel</span> channel <span class="token operator">=</span> <span class="token class-name">RabbitMqUtils</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;W1 等待接收消息处理时间较短&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

           <span class="token comment">// 消息消费的时候如何处理消息</span>
           <span class="token class-name">DeliverCallback</span> deliverCallback<span class="token operator">=</span><span class="token punctuation">(</span>consumerTag<span class="token punctuation">,</span> delivery<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
               <span class="token class-name">String</span> receivedMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>delivery<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

               <span class="token class-name">SleepUtils</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;接收到消息:&quot;</span><span class="token operator">+</span>receivedMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>

               <span class="token doc-comment comment">/**
                * 1. 消息标记 tag
                * 2. 是否批量应答未应答消息
                */</span>
               channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>delivery<span class="token punctuation">.</span><span class="token function">getEnvelope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span><span class="token punctuation">;</span>

           <span class="token class-name">CancelCallback</span> cancelCallback<span class="token operator">=</span><span class="token punctuation">(</span>consumerTag<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>consumerTag<span class="token operator">+</span><span class="token string">&quot;消费者取消消费接口回调逻辑&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span><span class="token punctuation">;</span>

           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消费者 W2 启动等待消费.................. &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

           <span class="token comment">// 采用手动应答</span>
           <span class="token keyword">boolean</span> autoAck <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
           channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token constant">ACK_QUEUE_NAME</span><span class="token punctuation">,</span>autoAck<span class="token punctuation">,</span> deliverCallback<span class="token punctuation">,</span>cancelCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Work02</span> <span class="token punctuation">{</span>

       <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">ACK_QUEUE_NAME</span><span class="token operator">=</span><span class="token string">&quot;ack_queue&quot;</span><span class="token punctuation">;</span>

       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

           <span class="token class-name">Channel</span> channel <span class="token operator">=</span> <span class="token class-name">RabbitMqUtils</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;W2 等待接收消息处理时间较长&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

           <span class="token comment">// 消息消费的时候如何处理消息</span>
           <span class="token class-name">DeliverCallback</span> deliverCallback<span class="token operator">=</span><span class="token punctuation">(</span>consumerTag<span class="token punctuation">,</span> delivery<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
               <span class="token class-name">String</span> receivedMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>delivery<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

               <span class="token class-name">SleepUtils</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;接收到消息:&quot;</span><span class="token operator">+</span>receivedMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>

               <span class="token doc-comment comment">/**
                * 1. 消息标记 tag
                * 2. 是否批量应答未应答消息
                */</span>
               channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>delivery<span class="token punctuation">.</span><span class="token function">getEnvelope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span><span class="token punctuation">;</span>

           <span class="token class-name">CancelCallback</span> cancelCallback<span class="token operator">=</span><span class="token punctuation">(</span>consumerTag<span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token punctuation">{</span>
               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>consumerTag<span class="token operator">+</span><span class="token string">&quot;消费者取消消费接口回调逻辑&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span><span class="token punctuation">;</span>

           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消费者 W2 启动等待消费.................. &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

           <span class="token comment">// 采用手动应答</span>
           <span class="token keyword">boolean</span> autoAck <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
           channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span><span class="token constant">ACK_QUEUE_NAME</span><span class="token punctuation">,</span>autoAck<span class="token punctuation">,</span> deliverCallback<span class="token punctuation">,</span>cancelCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li><li><p>睡眠工具类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SleepUtils</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">int</span> second<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> second<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> exception<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="手动应答效果演示" tabindex="-1"><a class="header-anchor" href="#手动应答效果演示" aria-hidden="true">#</a> 手动应答效果演示</h3><p>正常情况下消息发送方发送两个消息<code>C1</code>和<code>C2</code>分别接收到消息并进行处理：</p><figure><img src="https://cdn.jsdelivr.net/gh/1coins/assets/rabbitmq-introduction/manual-response-effect-demonstration-1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在发送者发送消息<code>dd</code>，发出消息之后的把<code>C2</code>消费者停掉，按理说该<code>C2</code>来处理该消息，但是由于它处理时间较长，在还未处理完，也就是说<code>C2</code>还没有执行<code>ack</code>代码的时候，<code>C2</code>被停掉了，此时会看到消息被<code>C1</code>接收到了，说明消息<code>dd</code>被重新入队，然后分配给能处理消息的<code>C1</code>处理了。</p><figure><img src="https://cdn.jsdelivr.net/gh/1coins/assets/rabbitmq-introduction/manual-response-effect-demonstration-2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="rabbitmq-持久化" tabindex="-1"><a class="header-anchor" href="#rabbitmq-持久化" aria-hidden="true">#</a> RabbitMQ 持久化</h2><h3 id="概念-1" tabindex="-1"><a class="header-anchor" href="#概念-1" aria-hidden="true">#</a> 概念</h3><p>刚刚已经看到了如何处理任务不丢失的情况，但是如何保障当<code>RabbitMQ</code>服务停掉以后消息生产者发送过来的消息不丢失？</p><p>默认情况下<code>RabbitMQ</code>退出或由于某种原因崩溃时，它忽视队列和消息，除非告知它不要这样做。</p><p>确保消息不会丢失需要做两件事：将队列和消息都标记为持久化。</p><h3 id="队列如何实现持久化" tabindex="-1"><a class="header-anchor" href="#队列如何实现持久化" aria-hidden="true">#</a> 队列如何实现持久化</h3><p>之前创建的队列都是非持久化的，<code>RabbitMQ</code>如果重启的话，该队列就会被删除掉，如果要队列实现持久化，需要在声明队列的时候把<code>durable</code>参数设置为持久化。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 让队列消息持久化</span>
<span class="token keyword">boolean</span> durable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token constant">TASK_QUEUE_NAME</span><span class="token punctuation">,</span>durable<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TASK_QUEUE_NAME</span><span class="token operator">=</span><span class="token string">&quot;ack_queue&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

        <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">Channel</span> channel<span class="token operator">=</span> <span class="token class-name">RabbitMqUtils</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token comment">// 让队列消息持久化</span>
            <span class="token keyword">boolean</span> durable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token constant">TASK_QUEUE_NAME</span><span class="token punctuation">,</span>durable<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 从控制台当中接受信息</span>
            <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请输入信息：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token class-name">String</span> message <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// UTF-8：防止中文乱码</span>
                channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span><span class="token constant">TASK_QUEUE_NAME</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;发送消息完成:&quot;</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是需要注意的就是如果之前声明的队列不是持久化的，需要把原先队列先删除，或者重新创建一个持久化的队列，不然就会出现错误：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>inequivalent arg <span class="token string">&#39;durable&#39;</span> <span class="token keyword">for</span> queue <span class="token string">&#39;ack_queue&#39;</span> <span class="token keyword">in</span> vhost <span class="token string">&#39;/&#39;</span><span class="token builtin class-name">:</span> received <span class="token string">&#39;true&#39;</span> but current is <span class="token string">&#39;false&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以下为控制台中持久化与非持久化队列的<code>UI</code>显示区：</p><figure><img src="https://cdn.jsdelivr.net/gh/1coins/assets/rabbitmq-introduction/persistent-queue-console-1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/1coins/assets/rabbitmq-introduction/persistent-queue-console-2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这个时候即使重启<code>RabbitMQ</code>，队列也依然存在。</p><h3 id="消息实现持久化" tabindex="-1"><a class="header-anchor" href="#消息实现持久化" aria-hidden="true">#</a> 消息实现持久化</h3><p>要想让消息实现持久化需要在消息生产者修改代码，添加属性<code>MessageProperties.PERSISTENT_TEXT_PLAIN</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span><span class="token constant">TASK_QUEUE_NAME</span><span class="token punctuation">,</span> <span class="token class-name">MessageProperties</span><span class="token punctuation">.</span><span class="token constant">PERSISTENT_TEXT_PLAIN</span><span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Task</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TASK_QUEUE_NAME</span><span class="token operator">=</span><span class="token string">&quot;ack_queue&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

        <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">Channel</span> channel<span class="token operator">=</span> <span class="token class-name">RabbitMqUtils</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token comment">// 让队列消息持久化</span>
            <span class="token keyword">boolean</span> durable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span><span class="token constant">TASK_QUEUE_NAME</span><span class="token punctuation">,</span>durable<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 从控制台当中接受信息</span>
            <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请输入信息：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token class-name">String</span> message <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// UTF-8：防止中文乱码</span>
                channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span><span class="token constant">TASK_QUEUE_NAME</span><span class="token punctuation">,</span> <span class="token class-name">MessageProperties</span><span class="token punctuation">.</span><span class="token constant">PERSISTENT_TEXT_PLAIN</span><span class="token punctuation">,</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;发送消息完成:&quot;</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将消息标记为持久化并不能完全保证不会丢失消息，尽管它告诉<code>RabbitMQ</code>将消息保存到磁盘，但是这里依然存在当消息刚准备存储在磁盘但还没有存储完的时候，消息还在缓存的一个间隔点。此时并没有真正写入磁盘，持久性保证并不强，但是对于简单任务队列而言，这已经绰绰有余了，如果需要更强有力的持久化策略，可以参考后边的发布确认章节。</p><h3 id="不公平分发" tabindex="-1"><a class="header-anchor" href="#不公平分发" aria-hidden="true">#</a> 不公平分发</h3><p>在最开始的时候，学习到<code>RabbitMQ</code>分发消息采用的轮训分发，但是在某种场景下这种策略并不是很好，比方说有两个消费者在处理任务，其中有个消费者 1 处理任务的速度非常快，而另外一个消费者 2 处理速度却很慢，这个时候还是采用轮训分发的话就会到这处理速度快的这个消费者很大一部分时间处于空闲状态，而处理慢的那个消费者一直在干活，这种分配方式在这种情况下其实就不太好，但是<code>RabbitMQ</code>并不知道这种情况，它依然很公平的进行分发。</p><p>为了避免这种情况，可以设置参数<code>channel.basicQos(1);</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Work01</span><span class="token operator">/</span><span class="token number">2</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">ACK_QUEUE_NAME</span><span class="token operator">=</span><span class="token string">&quot;ack_queue&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

        <span class="token class-name">Channel</span> channel <span class="token operator">=</span> <span class="token class-name">RabbitMqUtils</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> prefetchCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        channel<span class="token punctuation">.</span><span class="token function">basicQos</span><span class="token punctuation">(</span>prefetchCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;W1/2 等待接收消息处理时间较长&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>意思就是如果这个任务还没有处理完或者还没有应答，就先别分配，因为目前只能处理一个任务，然后<code>RabbitMQ</code>就会把该任务分配给没有那么忙的那个空闲消费者，当然如果所有的消费者都没有完成手上任务，队列还在不停的添加新任务，队列有可能就会遇到队列被撑满的情况，这个时候就只能添加新的<code>worker</code>或者改变其他存储任务的策略。</p><figure><img src="https://cdn.jsdelivr.net/gh/1coins/assets/rabbitmq-introduction/unfair-distribution-1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/1coins/assets/rabbitmq-introduction/unfair-distribution-2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="预取值" tabindex="-1"><a class="header-anchor" href="#预取值" aria-hidden="true">#</a> 预取值</h3><p>本身消息的发送就是异步发送的，所以在任何时候，<code>channel</code>上肯定不止只有一个消息；另外来自消费者的手动确认本质上也是异步的。因此这里就存在一个未确认的消息缓冲区，希望开发人员能<strong>限制此缓冲区的大小，以避免缓冲区里面无限制的未确认消息问题</strong>。</p><p>这个时候就可以通过使用<code>basic.qos</code>方法设置<strong>预取计数值</strong>来完成，该值<strong>定义通道上允许的未确认消息的最大数量</strong>；一旦数量达到配置的数量，<code>RabbitMQ</code>将停止在通道上传递更多消息，除非至少有一个未处理的消息被确认。</p><p>例如，假设在通道上有未确认的消息 5、6、7、8，并且通道的预取计数设置为 4，此时<code>RabbitMQ</code>将不会在该通道上再传递任何消息，除非至少有一个未应答的消息被<code>ack</code>，比方说<code>tag=6</code>这个消息刚刚被确认<code>ACK</code>，<code>RabbitMQ</code>将会感知这个情况到并再发送一条消息。</p><p>消息应答和<code>QoS</code>预取值对用户吞吐量有重大影响。通常，增加预取将提高向消费者传递消息的速度；<strong>虽然自动应答传输消息速率是最佳的，但是，在这种情况下已传递但尚未处理的消息的数量也会增加，从而增加了消费者的</strong>**<code>RAM</code>****消耗（随机存取存储器）**。</p><p>应该小心使用具有无限预处理的自动确认模式或手动确认模式，消费者消费了大量的消息如果没有确认的话，会导致消费者连接节点的内存消耗变大，所以找到合适的预取值是一个反复试验的过程，不同的负载该值取值也不同，100 到 300 范围内的值通常可提供最佳的吞吐量，并且不会给消费者带来太大的风险。</p><p>预取值为 1 是最保守的。当然这将使吞吐量变得很低，特别是消费者连接延迟很严重的情况下，特别是在消费者连接等待时间较长的环境中，对于大多数应用来说，稍微高一点的值将是最佳的。</p><figure><img src="https://cdn.jsdelivr.net/gh/1coins/assets/rabbitmq-introduction/prefetch-the-value-1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="https://cdn.jsdelivr.net/gh/1coins/assets/rabbitmq-introduction/prefetch-the-value-2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>W2</code>消费能力差，当发送 7 条数据，<code>W2</code>预取值为 5 的情况下，信道中会堆积 5 条消息：</p><figure><img src="https://cdn.jsdelivr.net/gh/1coins/assets/rabbitmq-introduction/prefetch-the-value-3.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,90);function j(T,R){const e=c("ExternalLinkIcon");return o(),l("div",null,[u,n("ol",null,[d,n("li",null,[r,n("ul",null,[n("li",null,[s("优点：由于"),k,s("语言的高并发特性，性能较好；吞吐量到万级，"),v,s("功能比较完备，健壮、稳定、易用、跨平台、支持多种语言："),m,s("、"),b,s("、"),g,s("、"),h,s("、"),f,s("、"),y,s("、"),q,s("、"),w,s("、"),_,s("、"),x,s("等，支持"),M,s("文档齐全；开源提供的管理界面非常棒，用起来很好用，社区活跃度高；"),n("a",C,[s("更新频率相当高"),t(e)])]),E])])]),S,n("ol",null,[n("li",null,[n("p",null,[n("a",Q,[s("官网地址"),t(e)])])]),U]),A])}const B=p(i,[["render",j],["__file","rabbitmq-introduction.html.vue"]]);export{B as default};
