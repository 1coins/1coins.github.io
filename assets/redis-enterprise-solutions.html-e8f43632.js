import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as t,c as n,e as d,a as e,b as a}from"./app-3e6d2d9d.js";const i={},o=d('<h1 id="缓存预热" tabindex="-1"><a class="header-anchor" href="#缓存预热" aria-hidden="true">#</a> 缓存预热</h1><h2 id="宕机" tabindex="-1"><a class="header-anchor" href="#宕机" aria-hidden="true">#</a> 宕机</h2><p>服务器启动后迅速宕机。</p><h2 id="问题排查" tabindex="-1"><a class="header-anchor" href="#问题排查" aria-hidden="true">#</a> 问题排查</h2><ol><li>请求数量较高</li><li>主从之间数据吞吐量较大，数据同步操作频度较高</li></ol><h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> 解决方案</h2><p>前置准备工作：</p><ol><li>日常例行统计数据访问记录，统计访问频度较高的热点数据</li><li>利用<code>LRU</code>数据删除策略，构建数据留存队列。例如：<code>storm</code>与<code>kafka</code>配合</li></ol><p>准备工作：</p><ol><li>将统计结果中的数据分类，根据级别，<code>redis</code>优先加载级别较高的热点数据</li><li>利用分布式多服务器同时进行数据读取，提速数据加载过程</li><li>热点数据主从同时预热</li></ol><p>实施：</p><ol><li>使用脚本程序固定触发数据预热过程</li><li>如果条件允许，使用<code>CDN</code>（内容分发网络），效果会更好</li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>缓存预热就是系统启动前，提前将相关的缓存数据直接加载到缓存系统；避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题！用户直接查询事先被预热的缓存数据！</p><h1 id="缓存雪崩" tabindex="-1"><a class="header-anchor" href="#缓存雪崩" aria-hidden="true">#</a> 缓存雪崩</h1><h2 id="数据库服务器崩溃" tabindex="-1"><a class="header-anchor" href="#数据库服务器崩溃" aria-hidden="true">#</a> 数据库服务器崩溃</h2><ol><li>系统平稳运行过程中，忽然数据库连接量激增</li><li>应用服务器无法及时处理请求</li><li>大量 408，500 错误页面出现</li><li>客户反复刷新页面获取数据</li><li>数据库崩溃</li><li>应用服务器崩溃</li><li>重启应用服务器无效</li><li><code>Redis</code>服务器崩溃</li><li><code>Redis</code>集群崩溃</li><li>重启数据库后再次被瞬间流量放倒</li></ol><h2 id="问题排查-1" tabindex="-1"><a class="header-anchor" href="#问题排查-1" aria-hidden="true">#</a> 问题排查</h2><ol><li>在一个<strong>较短</strong>的时间内，缓存中<strong>较多</strong>的<code>key</code><strong>集中过期</strong></li><li>此周期内请求访问过期的数据，<code>Redis</code>未命中，<code>Redis</code>向数据库获取数据</li><li>数据库同时接收到大量的请求无法及时处理</li><li><code>Redis</code>大量请求被积压，开始出现超时现象</li><li>数据库流量激增，数据库崩溃</li><li>重启后仍然面对缓存中无数据可用</li><li><code>Redis</code>服务器资源被严重占用，<code>Redis</code>服务器崩溃</li><li><code>Redis</code>集群呈现崩塌，集群瓦解</li><li>应用服务器无法及时得到数据响应请求，来自客户端的请求数量越来越多，应用服务器崩溃</li><li>应用服务器，<code>Redis</code>，数据库全部重启，效果不理想</li></ol><h2 id="问题分析" tabindex="-1"><a class="header-anchor" href="#问题分析" aria-hidden="true">#</a> 问题分析</h2><ul><li>短时间范围内</li><li>大量<code>key</code>集中过期</li></ul><h2 id="解决方案-道" tabindex="-1"><a class="header-anchor" href="#解决方案-道" aria-hidden="true">#</a> 解决方案（道）</h2><ol><li><p>更多的页面静态化处理</p></li><li><p>构建多级缓存架构：<code>Nginx</code>缓存 + <code>Redis</code>缓存 + <code>Ehcache</code>缓存</p></li><li><p>检测<code>MySql</code>严重耗时业务进行优化：对数据库的瓶颈排查：例如超时查询、耗时较高事务等</p></li><li><p>灾难预警机制<br> 监控<code>Redis</code>服务器性能指标：</p><ul><li><code>CPU</code>占用、<code>CPU</code>使用率</li><li>内存容量</li><li>查询平均响应时间</li><li>线程数</li></ul></li><li><p>限流、降级：短时间范围内牺牲一些客户体验，限制一部分请求访问，降低应用服务器压力，待业务低速运转后再逐步放开访问</p></li></ol><h2 id="解决方案-术" tabindex="-1"><a class="header-anchor" href="#解决方案-术" aria-hidden="true">#</a> 解决方案（术）</h2><ol><li><p><code>LRU</code>与<code>LFU</code>切换</p></li><li><p>数据有效期策略调整</p><ul><li>根据业务数据有效期进行分类错峰，<code>A</code>类 90 分钟，<code>B</code>类 80 分钟，<code>C</code>类 70 分钟</li><li>过期时间使用<strong>固定时间+随机值</strong>的形式，稀释集中到期的<code>key</code>的数量</li></ul></li><li><p>超热数据使用永久<code>key</code></p></li><li><p>定期维护（自动+人工）：对即将过期数据做访问量分析，确认是否延时，配合访问量统计，做热点数据的延时</p></li><li><p>加锁，<strong>慎用</strong>！</p></li></ol><h2 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1" aria-hidden="true">#</a> 总结</h2><p>缓存雪崩就是瞬间过期数据量太大，导致对数据库服务器造成压力。如能够有效避免过期时间集中，可以有效解决雪崩现象的出现（约 40%），配合其他策略一起使用，并监控服务器的运行数据，根据运行记录做快速调整。</p><h1 id="缓存击穿" tabindex="-1"><a class="header-anchor" href="#缓存击穿" aria-hidden="true">#</a> 缓存击穿</h1><h2 id="数据库服务器崩溃-1" tabindex="-1"><a class="header-anchor" href="#数据库服务器崩溃-1" aria-hidden="true">#</a> 数据库服务器崩溃</h2><ol><li>系统平稳运行过程中</li><li>数据库连接量瞬间激增</li><li><code>Redis</code>服务器无大量<code>key</code>过期</li><li><code>Redis</code>内存平稳，无波动</li><li><code>Redis</code>服务器<code>CPU</code>正常</li><li>数据库崩溃</li></ol><h2 id="问题排查-2" tabindex="-1"><a class="header-anchor" href="#问题排查-2" aria-hidden="true">#</a> 问题排查</h2><ol><li><code>Redis</code>中某个<code>key</code>过期，该<code>key</code>访问量巨大</li><li>多个数据请求从服务器直接压到<code>Redis</code>后，均未命中</li><li><code>Redis</code>在短时间内发起了大量对数据库中同一数据的访问</li></ol><h2 id="问题分析-1" tabindex="-1"><a class="header-anchor" href="#问题分析-1" aria-hidden="true">#</a> 问题分析</h2><ul><li>单个<code>key</code>高热数据</li><li><code>key</code>过期</li></ul><h2 id="解决方案-术-1" tabindex="-1"><a class="header-anchor" href="#解决方案-术-1" aria-hidden="true">#</a> 解决方案（术）</h2><ol><li>预先设定：以电商为例，每个商家根据店铺等级，指定若干款主打商品，在购物节期间，加大此类信息<code>key</code>的过期时长<br> 注意：购物节不仅仅指当天，以及后续若干天，访问峰值呈现逐渐降低的趋势</li><li>现场调整：监控访问量，对自然流量激增的数据延长过期时间或设置为永久性<code>key</code></li><li>后台刷新数据：启动定时任务，高峰期来临之前，刷新数据有效期，确保不丢失</li><li>二级缓存：设置不同的失效时间，保障不会被同时淘汰就行</li><li>加锁：分布式锁，防止被击穿，但是要注意也是性能瓶颈，<strong>慎重</strong>！</li></ol><h2 id="总结-2" tabindex="-1"><a class="header-anchor" href="#总结-2" aria-hidden="true">#</a> 总结</h2><p>缓存击穿就是单个高热数据过期的瞬间，数据访问量较大，未命中<code>Redis</code>后，发起了大量对同一数据的数据库访问，导致对数据库服务器造成压力；应对策略应该在业务数据分析与预防方面进行，配合运行监控测试与即时调整策略，毕竟单个<code>key</code>的过期监控难度较高，配合雪崩处理策略即可。</p><h1 id="缓存穿透" tabindex="-1"><a class="header-anchor" href="#缓存穿透" aria-hidden="true">#</a> 缓存穿透</h1><h2 id="数据库服务器崩溃-2" tabindex="-1"><a class="header-anchor" href="#数据库服务器崩溃-2" aria-hidden="true">#</a> 数据库服务器崩溃</h2><ol><li>系统平稳运行过程中</li><li>应用服务器流量随时间增量较大</li><li><code>Redis</code>服务器命中率随时间逐步降低</li><li><code>Redis</code>内存平稳，内存无压力</li><li><code>Redis</code>服务器<code>CPU</code>占用激增</li><li>数据库服务器压力激增</li><li>数据库崩溃</li></ol><h2 id="问题排查-3" tabindex="-1"><a class="header-anchor" href="#问题排查-3" aria-hidden="true">#</a> 问题排查</h2><ol><li><code>Redis</code>中大面积出现未命中</li><li>出现非正常<code>URL</code>访问</li></ol><h2 id="问题分析-2" tabindex="-1"><a class="header-anchor" href="#问题分析-2" aria-hidden="true">#</a> 问题分析</h2><ul><li>获取的数据在数据库中也不存在，数据库查询未得到对应数据</li><li><code>Redis</code>获取到<code>null</code>数据未进行持久化，直接返回</li><li>下次此类数据到达重复上述过程</li><li>出现黑客攻击服务器</li></ul><h2 id="解决方案-术-2" tabindex="-1"><a class="header-anchor" href="#解决方案-术-2" aria-hidden="true">#</a> 解决方案（术）</h2><ol><li><p>缓存<code>null</code>：对查询结果为<code>null</code>的数据进行缓存（长期使用，定期清理），设定短时限，例如 30~60 秒，最高 5 分钟</p></li><li><p>白名单策略</p><ul><li>提前预热各种分类数据<code>id</code>对应的<code>bitmaps</code>，<code>id</code>作为<code>bitmaps</code>的<code>offset</code>，相当于设置了数据白名单；当加载正常数据时，放行，加载异常数据时直接拦截（效率偏低）</li><li>使用布隆过滤器（有关布隆过滤器的命中问题对当前状况可以忽略）</li></ul></li><li><p>实施监控：实时监控<code>redis</code>命中率（业务正常范围时，通常会有一个波动值）与<code>null</code>数据的占比</p><ul><li>非活动时段波动：通常检测 3~5 倍，超过 5 倍纳入重点排查对象</li><li>活动时段波动：通常检测 10~50 倍，超过 50 倍纳入重点排查对象</li></ul><p>根据倍数不同，启动不同的排查流程。然后使用黑名单进行防控（运营）</p></li><li><p><code>key</code>加密：问题出现后，临时启动防灾业务<code>key</code>，对<code>key</code>进行业务层传输加密服务，设定校验程序，过来的<code>key</code>校验。例如每天随机分配 60 个加密串，挑选 2 到 3 个，混淆到页面数据<code>id</code>中，发现访问<code>key</code>不满足规则，驳回数据访问。</p></li></ol><h2 id="总结-3" tabindex="-1"><a class="header-anchor" href="#总结-3" aria-hidden="true">#</a> 总结</h2><p>缓存击穿访问了不存在的数据，跳过了合法数据的<code>redis</code>数据缓存阶段，每次访问数据库，导致对数据库服务器造成压力；通常此类数据的出现量是一个较低的值，当出现此类情况以毒攻毒，并及时**报警；**应对策略应该在临时预案防范方面多做文章。</p><p>无论是黑名单还是白名单，都是对整体系统的压力，警报解除后尽快移除。</p><h1 id="性能指标监控" tabindex="-1"><a class="header-anchor" href="#性能指标监控" aria-hidden="true">#</a> 性能指标监控</h1><h2 id="监控指标" tabindex="-1"><a class="header-anchor" href="#监控指标" aria-hidden="true">#</a> 监控指标</h2><ul><li>性能指标：<code>Performance</code></li><li>内存指标：<code>Memory</code></li><li>基本活动指标：<code>Basic activity</code></li><li>持久性指标：<code>Persistence</code></li><li>错误指标：<code>Error</code></li></ul><h3 id="性能指标-performance" tabindex="-1"><a class="header-anchor" href="#性能指标-performance" aria-hidden="true">#</a> 性能指标：Performance</h3><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>latency</code></td><td><code>Redis</code>响应一个请求的时间</td></tr><tr><td><code>instantaneous_ops_per_sec</code></td><td>平均每秒处理请求总数</td></tr><tr><td><code>hit rate (calculated)</code></td><td>缓存命中率（计算出来的）</td></tr></tbody></table><h3 id="内存指标-memory" tabindex="-1"><a class="header-anchor" href="#内存指标-memory" aria-hidden="true">#</a> 内存指标：Memory</h3><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>used_memory</code></td><td>已使用内存</td></tr><tr><td><code>mem_fragmentation_ratio</code></td><td>内存碎片率</td></tr><tr><td><code>evicted_keys</code></td><td>由于最大内存限制被移除的<code>key</code>的数量</td></tr><tr><td><code>blocked_clients</code></td><td>由于<code>BLPOP, BRPOP, or BRPOPLPUSH</code>而被阻塞的客户端</td></tr></tbody></table><h3 id="基本活动指标-basic-activity" tabindex="-1"><a class="header-anchor" href="#基本活动指标-basic-activity" aria-hidden="true">#</a> 基本活动指标：Basic activity</h3><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>connected_clients</code></td><td>客户端连接数</td></tr><tr><td><code>connected_slaves</code></td><td><code>Slave</code>数量</td></tr><tr><td><code>master_last_io_seconds_ago</code></td><td>最近一次主从交互之后的秒数</td></tr><tr><td><code>keyspace</code></td><td>数据库中的<code>key</code>值总数</td></tr></tbody></table><h3 id="持久性指标-persistence" tabindex="-1"><a class="header-anchor" href="#持久性指标-persistence" aria-hidden="true">#</a> 持久性指标：Persistence</h3><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>rdb_last_save_time</code></td><td>最后一次持久化保存到磁盘的时间戳</td></tr><tr><td><code>rdb_changes_since_last_save</code></td><td>自最后一次持久化以来数据库的更改数</td></tr></tbody></table><h3 id="错误指标-error" tabindex="-1"><a class="header-anchor" href="#错误指标-error" aria-hidden="true">#</a> 错误指标：Error</h3><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td><code>rejected_connections</code></td><td>由于到达<code>maxclient</code>限制而被拒绝的连接数</td></tr><tr><td><code>keyspace_misses</code></td><td><code>Key</code>值查找失败（没有命中）次数</td></tr><tr><td><code>master_link_down_since_seconds</code></td><td>主从断开的持续时间（以秒为单位）</td></tr></tbody></table><h2 id="监控方式" tabindex="-1"><a class="header-anchor" href="#监控方式" aria-hidden="true">#</a> 监控方式</h2><ul><li><p>工具</p><ul><li><code>Cloud Insight Redis</code></li><li><code>Prometheus</code></li><li><code>Redis-stat</code></li><li><code>Redis-faina</code></li><li><code>RedisLive</code></li><li><code>zabbix</code></li></ul></li><li><p>命令</p><ul><li><p><code>benchmark</code></p></li><li><p><code>redis cli</code></p><ul><li><code>monitor</code></li><li><code>showlog</code></li></ul></li></ul></li></ul><h3 id="benchmark" tabindex="-1"><a class="header-anchor" href="#benchmark" aria-hidden="true">#</a> benchmark</h3>',66),l=e("ul",null,[e("li",null,[e("p",null,"命令"),e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[a("redis-benchmark "),e("span",{class:"token punctuation"},"["),a("-h "),e("span",{class:"token punctuation"},"]"),a(),e("span",{class:"token punctuation"},"["),a("-p "),e("span",{class:"token punctuation"},"]"),a(),e("span",{class:"token punctuation"},"["),a("-c "),e("span",{class:"token punctuation"},"]"),a(),e("span",{class:"token punctuation"},"["),a("-n "),e("span",{class:"token operator"},"<"),a("requests"),e("span",{class:"token punctuation"},"]"),e("span",{class:"token operator"},">"),a(),e("span",{class:"token punctuation"},"["),a("-k"),e("span",{class:"token punctuation"},"]"),a(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])])]),e("li",null,[e("p",null,[a("范例 "),e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mn",null,"1")]),e("annotation",{encoding:"application/x-tex"},"1")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.6444em"}}),e("span",{class:"mord"},"1")])])])]),e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token comment"},"# 默认：50个连接，10000 次请求对应的性能"),a(`
redis-benchmark
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])])]),e("li",null,[e("p",null,[a("范例 "),e("span",{class:"katex"},[e("span",{class:"katex-mathml"},[e("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[e("semantics",null,[e("mrow",null,[e("mn",null,"2")]),e("annotation",{encoding:"application/x-tex"},"2")])])]),e("span",{class:"katex-html","aria-hidden":"true"},[e("span",{class:"base"},[e("span",{class:"strut",style:{height:"0.6444em"}}),e("span",{class:"mord"},"2")])])])]),e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token comment"},"# 100 个连接，5000 次请求对应的性能"),a(`
redis-benchmark `),e("span",{class:"token parameter variable"},"-c"),a(),e("span",{class:"token number"},"100"),a(),e("span",{class:"token parameter variable"},"-n"),a(),e("span",{class:"token number"},"5000"),a(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"})])]),e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[a("  "),e("span",{class:"token punctuation"},"["),a("echo@centos ~"),e("span",{class:"token punctuation"},"]"),a(`$ redis-benchmark
  `),e("span",{class:"token operator"},"=="),e("span",{class:"token operator"},"=="),e("span",{class:"token operator"},"="),a(" PING_INLINE "),e("span",{class:"token operator"},"=="),e("span",{class:"token operator"},"=="),e("span",{class:"token operator"},"="),a(`
    `),e("span",{class:"token number"},"100000"),a(" requests completed "),e("span",{class:"token keyword"},"in"),a(),e("span",{class:"token number"},"2.62"),a(` seconds
    `),e("span",{class:"token number"},"50"),a(` parallel clients
    `),e("span",{class:"token number"},"3"),a(` bytes payload
    keep alive: 
    `),e("span",{class:"token function"},"host"),a(" configuration "),e("span",{class:"token string"},'"save"'),e("span",{class:"token builtin class-name"},":"),a(),e("span",{class:"token number"},"10"),a(),e("span",{class:"token number"},"2"),a(`
    `),e("span",{class:"token function"},"host"),a(" configuration "),e("span",{class:"token string"},'"appendonly"'),e("span",{class:"token builtin class-name"},":"),a(),e("span",{class:"token function"},"yes"),a(`
    multi-thread: no
  `),e("span",{class:"token punctuation"},"["),a("echo@centos ~"),e("span",{class:"token punctuation"},"]"),a("$ redis-benchmark "),e("span",{class:"token parameter variable"},"-c"),a(),e("span",{class:"token number"},"1000"),a(),e("span",{class:"token parameter variable"},"-n"),a(),e("span",{class:"token number"},"1000"),a(`
  `),e("span",{class:"token operator"},"=="),e("span",{class:"token operator"},"=="),e("span",{class:"token operator"},"="),a(" PING_INLINE "),e("span",{class:"token operator"},"=="),e("span",{class:"token operator"},"=="),e("span",{class:"token operator"},"="),a(`
    `),e("span",{class:"token number"},"1000"),a(" requests completed "),e("span",{class:"token keyword"},"in"),a(),e("span",{class:"token number"},"0.11"),a(` seconds
    `),e("span",{class:"token number"},"1000"),a(` parallel clients
    `),e("span",{class:"token number"},"3"),a(` bytes payload
    keep alive: 
    `),e("span",{class:"token function"},"host"),a(" configuration "),e("span",{class:"token string"},'"save"'),e("span",{class:"token builtin class-name"},":"),a(),e("span",{class:"token number"},"10"),a(),e("span",{class:"token number"},"2"),a(`
    `),e("span",{class:"token function"},"host"),a(" configuration "),e("span",{class:"token string"},'"appendonly"'),e("span",{class:"token builtin class-name"},":"),a(),e("span",{class:"token function"},"yes"),a(`
    multi-thread: no
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])])])],-1),c=d(`<table><thead><tr><th>序号</th><th>选项</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>1</td><td><code>-h</code></td><td>指定服务器主机名</td><td>127.0.0.1</td></tr><tr><td>2</td><td><code>-p</code></td><td>指定服务器端口</td><td>6379</td></tr><tr><td>3</td><td><code>-s</code></td><td>指定服务器<code>socket</code></td><td></td></tr><tr><td>4</td><td><code>-c </code></td><td>指定并发连接数</td><td>50</td></tr><tr><td>5</td><td><code>-n</code></td><td>指定请求数</td><td>10000</td></tr><tr><td>6</td><td><code>-d</code></td><td>以字节的形式指定<code>SET/GET</code>值的数据大小</td><td>2</td></tr><tr><td>7</td><td><code>-k</code></td><td><code>1 = keep alive,0 = reconnect</code></td><td>1</td></tr><tr><td>8</td><td><code>-r</code></td><td><code>SET/GET/INCR</code>使用随机<code>key</code>，<code>SADD</code>使用随机值</td><td></td></tr><tr><td>9</td><td><code>-p</code></td><td>通过管道传输<code>&lt;numreq&gt;</code>请求</td><td>1</td></tr><tr><td>10</td><td><code>-q</code></td><td>强制退出<code>redis</code>，仅显示<code>query/sec</code>值</td><td></td></tr><tr><td>11</td><td><code>--csv</code></td><td>以<code>CSV</code>格式输出</td><td></td></tr><tr><td>12</td><td><code>-l</code></td><td>生成循环，永久执行测试</td><td></td></tr><tr><td>13</td><td><code>-t</code></td><td>仅运行以逗号分隔的测试命令列表</td><td></td></tr><tr><td>14</td><td><code>-I</code></td><td><code>Idle</code>模式，仅打开<code>N</code>个<code>idle</code>连接并等待</td><td></td></tr></tbody></table><h3 id="monitor" tabindex="-1"><a class="header-anchor" href="#monitor" aria-hidden="true">#</a> monitor</h3><ul><li><p>命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 打印服务器调试信息</span>
monitor
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>  <span class="token punctuation">[</span>echo@centos ~<span class="token punctuation">]</span>$ <span class="token function">sudo</span> redis-cli <span class="token parameter variable">-p</span> <span class="token number">6379</span>
  <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> monitor
  OK
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="showlog" tabindex="-1"><a class="header-anchor" href="#showlog" aria-hidden="true">#</a> showlog</h3><ul><li><p>命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>showlog <span class="token punctuation">[</span>operator<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>[operator]</code>：</p><ul><li><code>get</code>：获取慢查询日志</li><li><code>len</code>：获取慢查询日志条目数</li><li><code>reset</code>：重置慢查询日志</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>  <span class="token punctuation">[</span>echo@centos ~<span class="token punctuation">]</span>$ <span class="token function">sudo</span> redis-cli <span class="token parameter variable">-p</span> <span class="token number">6379</span>
  <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> slowlog get
  <span class="token punctuation">(</span>empty array<span class="token punctuation">)</span>
  <span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>相关配置</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 设置慢查询的时间下线，单位：微妙</span>
slowlog-log-slower-than <span class="token number">1000</span>
<span class="token comment"># 设置慢查询命令对应的日志显示长度，单位：命令数</span>
slowlog-max-len <span class="token number">100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>‍</p>`,6),r=[o,l,c];function h(p,u){return t(),n("div",null,r)}const k=s(i,[["render",h],["__file","redis-enterprise-solutions.html.vue"]]);export{k as default};
