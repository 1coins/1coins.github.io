import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as t,c as o,e as d}from"./app-3e6d2d9d.js";const c={},a=d('<h1 id="什么是正则表达式" tabindex="-1"><a class="header-anchor" href="#什么是正则表达式" aria-hidden="true">#</a> 什么是正则表达式？</h1><blockquote><p>正则表达式是一组由字母和符号组成的特殊文本, 它可以用来从文本中找出满足你想要的格式的句子。</p></blockquote><p>一个正则表达式是在一个主体字符串中从左到右匹配字符串时的一种样式。例如<code>Regular expression</code>​是一个完整的句子，但我们常使用缩写的术语<code>regex</code>​或<code>regexp</code>​。</p><p>正则表达式可以用来替换文本中的字符串、验证形式、提取字符串等等。</p><p>想象你正在写一个应用，然后你想设定一个用户命名的规则，让用户名包含字符、数字、下划线和连字符以及限制字符的个数，好让名字看起来没那么丑。</p><p>我们使用以下正则表达式来验证一个用户名:</p><figure><img src="https://cdn.jsdelivr.net/gh/1coins/assets/regex-summary/regex-validation-username.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>以上的正则表达式可以接受 <code>john_doe</code>​, <code>jo-hn_doe</code>​, <code>john12_as</code>​，但不匹配<code>Jo</code>​，因为它包含了大写的字母而且太短了。</p><h1 id="基本匹配" tabindex="-1"><a class="header-anchor" href="#基本匹配" aria-hidden="true">#</a> 基本匹配</h1><p>正则表达式其实就是在执行搜索时的格式，它由一些字母和数字组合而成。</p><p>例如: 一个正则表达式 <code>the</code>​，它表示一个规则：由字母<code>t</code>​开始,接着是<code>h</code>​,再接着是<code>e</code>​.</p><blockquote><p>&quot;the&quot; =&gt; The fat cat sat on <strong>the</strong> mat.</p></blockquote><p>正则表达式<code>123</code>​匹配字符串<code>123</code>​。它逐个字符的与输入的正则表达式做比较。</p><p>正则表达式是大小写敏感的，所以<code>The</code>​不会匹配<code>the</code>​</p><blockquote><p>&quot;The&quot; =&gt; <strong>The</strong> fat cat sat on the mat.</p></blockquote><h1 id="元字符" tabindex="-1"><a class="header-anchor" href="#元字符" aria-hidden="true">#</a> 元字符</h1><p>正则表达式主要依赖于元字符。</p><p>元字符不代表他们本身的字面意思，他们都有特殊的含义。</p><p>一些元字符写在方括号中的时候有一些特殊的意思.。</p><p>以下是一些元字符的介绍:</p><table><thead><tr><th style="text-align:center;">元字符</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><code>.</code></td><td style="text-align:center;">句号匹配任意单个字符除了换行符</td></tr><tr><td style="text-align:center;"><code>[ ]</code></td><td style="text-align:center;">字符种类，匹配方括号内的任意字符</td></tr><tr><td style="text-align:center;"><code>[^ ]</code></td><td style="text-align:center;">否定的字符种类. 匹配除了方括号里的任意字符</td></tr><tr><td style="text-align:center;"><code>*</code></td><td style="text-align:center;">匹配 &gt;= 0 个重复的在<code>*</code>号之前的字符</td></tr><tr><td style="text-align:center;"><code>+</code></td><td style="text-align:center;">匹配 &gt; 1 个重复的<code>+</code>号前的字符</td></tr><tr><td style="text-align:center;"><code>?</code></td><td style="text-align:center;">标记<code>?</code>之前的字符为可选</td></tr><tr><td style="text-align:center;"><code>{n,m}</code></td><td style="text-align:center;">匹配 num 个中括号之前的字符 (n &lt;= num &lt;= m)</td></tr><tr><td style="text-align:center;"><code>(xyz)</code></td><td style="text-align:center;">字符集，匹配与 xyz 完全相等的字符串</td></tr><tr><td style="text-align:center;">​<code>|</code>​</td><td style="text-align:center;">或运算符，匹配符号前或后的字符</td></tr><tr><td style="text-align:center;">​<code>\\</code>​</td><td style="text-align:center;">转义字符，用于匹配一些保留的字符 <code>[ ] ( ) { } . * + ? ^ $ |</code></td></tr><tr><td style="text-align:center;"><code>^</code></td><td style="text-align:center;">从开始行开始匹配</td></tr><tr><td style="text-align:center;"><code>$</code></td><td style="text-align:center;">从末端开始匹配</td></tr></tbody></table><h2 id="点运算符-​" tabindex="-1"><a class="header-anchor" href="#点运算符-​" aria-hidden="true">#</a> 点运算符 <code>.</code>​</h2><p>​<code>.</code>​是元字符中最简单的例子。</p><p>​<code>.</code>​匹配任意单个字符，但不匹配换行符。</p><p>例如，表达式<code>.ar</code>​匹配一个任意字符后面跟着是<code>a</code>​和<code>r</code>​的字符串。</p><blockquote><p>&quot;.ar&quot; =&gt; The <strong>car par</strong>ked in the <strong>gar</strong>age</p></blockquote><h2 id="字符集" tabindex="-1"><a class="header-anchor" href="#字符集" aria-hidden="true">#</a> 字符集</h2><p>字符集也叫做字符类。</p><p>方括号用来指定一个字符集，在方括号中使用连字符来指定字符集的范围；在方括号中的字符集不关心顺序。</p><p>例如，表达式<code>[Tt]he</code>​ 匹配 <code>the</code>​ 和 <code>The</code>​。</p><blockquote><p>&quot;[Tt]he&quot; =&gt; <strong>The</strong> car parked in <strong>the</strong> garage.</p></blockquote><p>方括号的句号就表示句号。</p><p>表达式 <code>ar[.]</code>​ 匹配 <code>ar.</code>​字符串。</p><blockquote><p>&quot;ar[.]&quot; =&gt; A garage is a good place to park a c<strong>ar</strong></p></blockquote><h3 id="否定字符集" tabindex="-1"><a class="header-anchor" href="#否定字符集" aria-hidden="true">#</a> 否定字符集</h3><p>一般来说 <code>^</code>​ 表示一个字符串的开头，但它用在一个方括号的开头的时候表示这个字符集是否定的。</p><p>例如, 表达式<code>[^c]ar</code>​ 匹配一个后面跟着<code>ar</code>​的除了<code>c</code>​的任意字。</p><blockquote><p>&quot;[^c]ar&quot; =&gt; The car <strong>par</strong>ked in the <strong>gar</strong>age.</p></blockquote><h2 id="重复次数" tabindex="-1"><a class="header-anchor" href="#重复次数" aria-hidden="true">#</a> 重复次数</h2><p>后面跟着元字符<code>+</code>​、<code>*</code>​、<code>?</code>​ 的，用来指定匹配子模式的次数。这些元字符在不同的情况下有着不同的意思。</p><h3 id="​-号" tabindex="-1"><a class="header-anchor" href="#​-号" aria-hidden="true">#</a> *​ 号</h3><p>​<code>*</code>​号匹配在<code>*</code>​之前的字符出现<code>大于等于0</code>​次。</p><p>例如，表达式<code>a*</code>​匹配以<code>0</code>​或更多个<code>a</code>​开头的字符，因为有<code>0</code>​个这个条件，其实也就匹配了所有的字符。表达式<code>[a-z]*</code>​匹配一个行中所有以小写字母开头的字符串。</p><blockquote><p>&quot;[a-z]*&quot; =&gt; T<strong>he car parked in the garage</strong>.</p></blockquote><p>​<code>*</code>​字符和<code>.</code>​字符搭配可以匹配所有的字符<code>.*</code>​。</p><p>​<code>*</code>​和表示匹配空格的符号<code>\\s</code>​连起来用, 如表达式<code>\\s*cat\\s*</code>​匹配<code>0</code>​或更多个空格开头和<code>0</code>​或更多个空格结尾的<code>cat</code>​字符串。</p><blockquote><p>&quot;\\s<em>cat\\s</em>&quot; =&gt; The fat <strong>cat</strong> sat on the con<strong>cat</strong>enation</p></blockquote><h3 id="号" tabindex="-1"><a class="header-anchor" href="#号" aria-hidden="true">#</a> +` 号</h3><p>​<code>+</code>​号匹配<code>+</code>​号之前的字符出现<code>&gt;=1</code>​次个字符。</p><p>例如，表达式<code>c.+t</code>​ 匹配以首字母<code>c</code>​开头以<code>t</code>​结尾,中间跟着任意个字符的字符串。</p><blockquote><p>&quot;c.+t&quot; =&gt; The fat <strong>cat sat on the mat</strong>.</p></blockquote><h3 id="​-号-1" tabindex="-1"><a class="header-anchor" href="#​-号-1" aria-hidden="true">#</a> ?​ 号</h3><p>在正则表达式中元字符 <code>?</code>​ 标记在符号前面的字符为可选, 即出现<code>0</code>​或<code>1</code>​次。</p><p>例如，表达式<code>[T]?he</code>​匹配字符串<code>he</code>​和<code>The</code>​。</p><blockquote><p>&quot;[T]he&quot; =&gt; <strong>The</strong> car is parked in the garage.</p><p>&quot;[T]?he&quot; =&gt; <strong>The</strong> car is parked in t<strong>he</strong> garage.</p></blockquote><h2 id="​-号-2" tabindex="-1"><a class="header-anchor" href="#​-号-2" aria-hidden="true">#</a> {}​ 号</h2><p>在正则表达式中 <code>{}</code>​ 是一个量词，常用来一个或一组字符可以重复出现的次数。</p><p>例如，表达式 <code>[0-9]{2,3}</code>​ 匹配<code>2~3</code>​位<code>0~9</code>​的数字.</p><blockquote><p>&quot;[0-9]{2,3}&quot; =&gt; The number was 9.<strong>999</strong>7 but we rounded it off to <strong>10</strong>.0.</p></blockquote><p>我们可以省略第二个参数。</p><p>例如，<code>[0-9]{2,}</code>​匹配至少两位<code>0~9</code>​的数字。</p><blockquote><p>&quot;[0-9]{2,}&quot; =&gt; The number was 9.<strong>9997</strong> but we rounded it off to <strong>10</strong>.0.</p></blockquote><p>如果逗号也省略掉则表示重复固定的次数。<br> 例如, <code>[0-9]{3}</code>​ 匹配<code>3</code>​位数字。</p><blockquote><p>&quot;[0-9]{3}&quot; =&gt; The number was 9.<strong>999</strong>7 but we rounded it off to 10.0.</p></blockquote><h2 id="​-特征标群" tabindex="-1"><a class="header-anchor" href="#​-特征标群" aria-hidden="true">#</a> (...)​ 特征标群</h2><p>特征标群是一组写在 <code>(...)</code>​ 中的子模式。</p><p>例如之前说的<code>{}</code>​是用来表示前面一个字符出现指定次数，但如果在<code>{}</code>​前加入特征标群则表示整个标群内的字符重复<code>N</code>​次。</p><p>例如, 表达式<code>(ab)*</code>​匹配连续出现<code>0</code>​或更多个<code>ab</code>​。</p><p>我们还可以在<code>()</code>​中用或字符<code>|</code>​表示或。</p><p>例如，<code>(c|g|p)ar</code>​匹配<code>car</code>​或<code>gar</code>​或<code>par</code>​。</p><blockquote><p>&quot;(c|g|p)ar&quot; =&gt; The <strong>car</strong> is <strong>par</strong>ked in the <strong>gar</strong>age.</p></blockquote><h2 id="​-或运算符" tabindex="-1"><a class="header-anchor" href="#​-或运算符" aria-hidden="true">#</a> |​ 或运算符</h2><p>或运算符就表示或，用作判断条件。</p><p>例如<code>(T|t)he|car</code>​匹配<code>(T|t)he</code>​ 或 <code>car</code>​。</p><blockquote><p>&quot;(T|t)he|car&quot; =&gt; <strong>The car</strong> is parked in <strong>the</strong> garage.</p></blockquote><h2 id="转码特殊字符" tabindex="-1"><a class="header-anchor" href="#转码特殊字符" aria-hidden="true">#</a> 转码特殊字符</h2><p>反斜线<code>\\</code>​在表达式中用于转码紧跟其后的字符。用于指定<code>{ } [ ] / \\ + * . $ ^ | ?</code>​这些特殊字符，如果想要匹配这些特殊字符则要在其前面加上反斜线<code>\\</code>​。</p><p>例如<code>.</code>​是用来匹配除换行符外的所有字符的，如果想要匹配句子中的<code>.</code>​则要写成<code>\\.</code>​。</p><blockquote><p>&quot;(f|c|m)at.?&quot; =&gt; The <strong>fat cat</strong> sat on the <strong>mat</strong>.</p></blockquote><h2 id="锚点" tabindex="-1"><a class="header-anchor" href="#锚点" aria-hidden="true">#</a> 锚点</h2><p>在正则表达式中, 想要匹配指定开头或结尾的字符串就要使用到锚点. <code>^</code>​ 指定开头, <code>$</code>​ 指定结尾.</p><h3 id="​-号-3" tabindex="-1"><a class="header-anchor" href="#​-号-3" aria-hidden="true">#</a> ^​ 号</h3><p>​<code>^</code>​用来检查匹配的字符串是否在所匹配字符串的开头。</p><p>例如，在<code>abc</code>​中使用表达式<code>^a</code>​会得到结果<code>a</code>​，但如果使用<code>^b</code>​将匹配不到任何结果，因为在字符串<code>abc</code>​中并不是以<code>b</code>​开头。</p><p>例如，<code>^(T|t)he</code>​匹配以<code>The</code>​或<code>the</code>​开头的字符串。</p><blockquote><p>&quot;(T|t)he&quot; =&gt; The car is parked in <strong>the</strong> garage.</p><p>&quot;^(T|t)he&quot; =&gt; <strong>The</strong> car is parked in the garage.</p></blockquote><h3 id="​-号-4" tabindex="-1"><a class="header-anchor" href="#​-号-4" aria-hidden="true">#</a> $​ 号</h3><p>同理于<code>^</code>​号，<code>$</code>​号用来匹配字符是否是最后一个。</p><p>例如，<code>(at\\.)$</code>​匹配以<code>at.</code>​结尾的字符串。</p><blockquote><p>&quot;(at.)&quot; =&gt; The fat c<strong>at.</strong> s<strong>at.</strong> on the mat.</p><p>&quot;(at.)$&quot; =&gt; The fat cat. sat. on the m<strong>at.</strong></p></blockquote><h1 id="简写字符集" tabindex="-1"><a class="header-anchor" href="#简写字符集" aria-hidden="true">#</a> 简写字符集</h1><p>正则表达式提供一些常用的字符集简写. 如下:</p><table><thead><tr><th style="text-align:center;">简写</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center;"><code>.</code></td><td>除换行符外的所有字符</td></tr><tr><td style="text-align:center;"><code>\\w</code></td><td>匹配所有字母数字, 等同于 <code>[a-zA-Z0-9_]</code>​</td></tr><tr><td style="text-align:center;"><code>\\W</code></td><td>匹配所有非字母数字, 即符号, 等同于: <code>[^\\w]</code>​</td></tr><tr><td style="text-align:center;"><code>\\d</code></td><td>匹配数字: <code>[0-9]</code>​</td></tr><tr><td style="text-align:center;"><code>\\D</code></td><td>匹配非数字: <code>[^\\d]</code>​</td></tr><tr><td style="text-align:center;"><code>\\s</code></td><td>匹配所有空格字符, 等同于: <code>[\\t\\n\\f\\r\\p{Z}]</code>​</td></tr><tr><td style="text-align:center;"><code>\\S</code></td><td>匹配所有非空格字符: <code>[^\\s]</code>​</td></tr></tbody></table><h1 id="前后关联约束-前后预查" tabindex="-1"><a class="header-anchor" href="#前后关联约束-前后预查" aria-hidden="true">#</a> 前后关联约束（前后预查）</h1><p>前置约束和后置约束都属于<strong>非捕获簇</strong>（用于匹配不在匹配列表中的格式）。</p><p>前置约束用于判断所匹配的格式是否在另一个确定的格式之后。</p><p>例如，我们想要获得所有跟在<code>$</code>​符号后的数字，我们可以使用正向向后约束<code>(?&lt;=\\$)[0-9\\.]*</code>​。这个表达式匹配<code>$</code>​开头，之后跟着<code>0,1,2,3,4,5,6,7,8,9,.</code>​这些字符可以出现大于等于<code>0</code>​次。</p><p>前后关联约束如下：</p><table><thead><tr><th style="text-align:center;">符号</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center;"><code>?=</code></td><td>前置约束-存在</td></tr><tr><td style="text-align:center;"><code>?!</code></td><td>前置约束-排除</td></tr><tr><td style="text-align:center;"><code>?&lt;=</code></td><td>后置约束-存在</td></tr><tr><td style="text-align:center;"><code>?&lt;!</code></td><td>后置约束-排除</td></tr></tbody></table><h2 id="​-​​-前置约束-存在" tabindex="-1"><a class="header-anchor" href="#​-​​-前置约束-存在" aria-hidden="true">#</a> ​?=...​​ 前置约束（存在）</h2><p>​<code>?=...</code>​前置约束（存在），表示第一部分表达式必须跟在<code>?=...</code>​定义的表达式之后。</p><p>返回结果只瞒住第一部分表达式。</p><p>定义一个前置约束（存在）要使用<code>()</code>​，在括号内部使用一个问号和等号：<code>(?=...)</code>​.</p><p>前置约束的内容写在括号中的等号后面。</p><p>例如，表达式<code>[T|t]he(?=\\sfat)</code>​匹配<code>The</code>​和<code>the</code>​，在括号中我们又定义了前置约束（存在）<code>(?=\\sfat)</code>​，即<code>The</code>​和<code>the</code>​后面紧跟着<code>(空格)fat</code>​。</p><blockquote><p>&quot;[T|t]he(?=\\sfat)&quot; =&gt; <strong>The</strong> fat cat sat on the mat.</p></blockquote><h2 id="​-​​-前置约束-排除" tabindex="-1"><a class="header-anchor" href="#​-​​-前置约束-排除" aria-hidden="true">#</a> ​?!...​​ 前置约束-排除</h2><p>前置约束-排除<code>?!</code>​用于筛选所有匹配结果，筛选条件为其后不跟随着定义的格式。</p><p>​<code>前置约束-排除</code>​的定义和<code>前置约束(存在)</code>​一样, 区别就是<code>=</code>​替换成<code>!</code>​也就是<code>(?!...)</code>​。</p><p>表达式<code>[T|t]he(?!\\sfat)</code>​匹配<code>The</code>​和<code>the</code>​，且其后不跟着 <code>(空格)fat</code>​。</p><blockquote><p>&quot;[T|t]he(?!\\sfat)&quot; =&gt; The fat cat sat on <strong>the</strong> mat.</p></blockquote><h2 id="​-​​-后置约束-存在" tabindex="-1"><a class="header-anchor" href="#​-​​-后置约束-存在" aria-hidden="true">#</a> ​?&lt;=...​​ 后置约束-存在</h2><p>后置约束-存在记作<code>(?&lt;=...)</code>​，用于筛选所有匹配结果，筛选条件为 其前跟随着定义的格式。</p><p>例如，表达式<code>(?&lt;=[T|t]he\\s)(fat|mat)</code>​匹配<code>fat</code>​和<code>mat</code>​，且其前跟着<code>The</code>​或<code>the</code>​。</p><blockquote><p>&quot;(?&lt;=[T|t]he\\s)(fat|mat)&quot; =&gt; The <strong>fat</strong> cat sat on the <strong>mat</strong>.</p></blockquote><h2 id="​-​​-后置约束-排除" tabindex="-1"><a class="header-anchor" href="#​-​​-后置约束-排除" aria-hidden="true">#</a> ​?&lt;!...​​ 后置约束-排除</h2><p>后置约束-排除记作<code>(?&lt;!...)</code>​，用于筛选所有匹配结果，筛选条件为其前不跟着定义的格式。</p><p>例如，表达式<code>(?&lt;!(T|t)he\\s)(cat)</code>​匹配<code>cat</code>​，且其前不跟着<code>The</code>​或<code>the</code>​。</p><blockquote><p>&quot;(?&lt;![T|t]he\\s)(cat)&quot; =&gt; The cat sat on <strong>cat</strong>.</p></blockquote><h1 id="标志" tabindex="-1"><a class="header-anchor" href="#标志" aria-hidden="true">#</a> 标志</h1><p>标志也叫修饰语，因为它可以用来修改表达式的搜索结果。这些标志可以任意的组合使用，它也是整个正则表达式的一部分。</p><table><thead><tr><th style="text-align:center;">标志</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><code>i</code></td><td style="text-align:center;">忽略大小写</td></tr><tr><td style="text-align:center;"><code>g</code></td><td style="text-align:center;">全局搜索</td></tr><tr><td style="text-align:center;"><code>m</code></td><td style="text-align:center;">多行的: 锚点元字符 <code>^</code>​ <code>$</code>​ 工作范围在每行的起始</td></tr></tbody></table><h2 id="忽略大小写-case-insensitive" tabindex="-1"><a class="header-anchor" href="#忽略大小写-case-insensitive" aria-hidden="true">#</a> 忽略大小写（Case Insensitive）</h2><p>修饰语<code>i</code>​用于忽略大小写。</p><p>例如，表达式<code>/The/gi</code>​表示在全局搜索<code>The</code>​，在后面的<code>i</code>​将其条件修改为忽略大小写，则变成搜索<code>the</code>​和 <code>The</code>​，<code>g</code>​表示全局搜索。</p><blockquote><p>&quot;The&quot; =&gt; <strong>The</strong> fat cat sat on the mat.</p><p>&quot;/The/gi&quot; =&gt; <strong>The</strong> fat cat sat on <strong>the</strong> mat.</p></blockquote><h2 id="全局搜索-global-search" tabindex="-1"><a class="header-anchor" href="#全局搜索-global-search" aria-hidden="true">#</a> 全局搜索（Global search）</h2><p>修饰符<code>g</code>​常用于执行一个全局搜索匹配，即（不仅仅返回第一个匹配的，而是返回全部）。</p><p>例如，表达式<code>/.(at)/g</code>​表示搜索任意字符（除了换行）+<code>at</code>​，并返回全部结果。</p><blockquote><p>&quot;/.(at)/&quot; =&gt; The <strong>fat</strong> cat sat on the mat.</p><p>&quot;/.(at)/g&quot; =&gt; The <strong>fat cat sat</strong> ont the <strong>mat</strong>.</p></blockquote><h2 id="多行修饰符-multiline" tabindex="-1"><a class="header-anchor" href="#多行修饰符-multiline" aria-hidden="true">#</a> 多行修饰符（Multiline）</h2><p>多行修饰符<code>m</code>​常用于执行一个多行匹配.</p><p>像之前介绍的<code>(^,$)</code>​用于检查格式是否是在待检测字符串的开头或结尾，但我们如果想要它在每行的开头和结尾生效，我们需要用到多行修饰符<code>m</code>​。</p><p>例如，表达式<code>/at(.)?$/gm</code>​表示在待检测字符串每行的末尾搜索<code>at</code>​后跟一个或多个<code>.</code>​的字符串，并返回全部结果。</p><blockquote><p>&quot;/.at(.)?$/&quot; =&gt; The fat cat sat on the <strong>mat.</strong></p></blockquote><blockquote><p>&quot;/.at(.)?$/gm&quot; =&gt; The fat cat <strong>sat</strong> on the <strong>mat.</strong></p></blockquote><h1 id="额外补充" tabindex="-1"><a class="header-anchor" href="#额外补充" aria-hidden="true">#</a> 额外补充</h1><ul><li>正整数：<code>^\\d+$</code>​</li><li>负整数：<code>^-\\d+$</code>​</li><li>手机国家号：<code>^+?[\\d\\s]{3,}$</code>​</li><li>手机号：<code>^+?[\\d\\s]+(?[\\d\\s]{10,}$</code>​</li><li>整数：<code>^-?\\d+$</code>​</li><li>用户名：<code>^[\\w\\d_.]{4,16}$</code>​</li><li>数字和英文字母：<code>^[a-zA-Z0-9]*$</code>​</li><li>数字和应为字母和空格：<code>^[a-zA-Z0-9 ]*$</code>​</li><li>密码：<code>^(?=^.{6,}$)((?=.*[A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z]))^.*$</code>​</li><li>邮箱：<code>^([a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4})*$</code>​</li><li>IP4 地址：<code>^((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$</code>​</li><li>纯小写字母：<code>^([a-z])*$</code>​</li><li>纯大写字母：<code>^([A-Z])*$</code>​</li><li>URL：<code>^(((http|https|ftp):\\/\\/)?([[a-zA-Z0-9]\\-\\.])+(\\.)([[a-zA-Z0-9]]){2,4}([[a-zA-Z0-9]\\/+=%&amp;_\\.~?\\-]*))*$</code>​</li><li>VISA 信用卡号：<code>^(4[0-9]{12}(?:[0-9]{3})?)*$</code>​</li><li>日期 (MM/DD/YYYY)：<code>^(0?[1-9]|1[012])[- /.](0?[1-9]|[12][0-9]|3[01])[- /.](19|20)?[0-9]{2}$</code>​</li><li>日期 (YYYY/MM/DD)：<code>^(19|20)?[0-9]{2}[- /.](0?[1-9]|1[012])[- /.](0?[1-9]|[12][0-9]|3[01])$</code>​</li><li>MasterCard 信用卡号：<code>^(5[1-5][0-9]{14})*$</code>​</li></ul>',138),r=[a];function n(h,s){return t(),o("div",null,r)}const p=e(c,[["render",n],["__file","regex-summary.html.vue"]]);export{p as default};
